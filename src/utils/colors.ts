export const hexColors = [
    '#14367d',
    '#15397f',
    '#173c82',
    '#183f85',
    '#194287',
    '#1a448a',
    '#1c468e',
    '#1d4993',
    '#1e4c97',
    '#21509a',
    '#21529b',
    '#23549f',
    '#2458a2',
    '#265aa5',
    '#275da7',
    '#275ea7',
    '#2961a9',
    '#2962aa',
    '#2b66ac',
    '#2c68af',
    '#2d6aaf',
    '#2e6cb1',
    '#2f6eb3',
    '#3171b5',
    '#3173b6',
    '#3375b8',
    '#3478ba',
    '#3579bb',
    '#367bbc',
    '#377ebd',
    '#3880be',
    '#3a82c0',
    '#3a84c0',
    '#3b86c2',
    '#3c89c4',
    '#3d8ac5',
    '#3f8dc6',
    '#4090c7',
    '#4192c9',
    '#4294c9',
    '#4397cb',
    '#4498cb',
    '#459acb',
    '#479dcd',
    '#479fce',
    '#48a1d0',
    '#49a3d0',
    '#4aa4d1',
    '#4ba5d1',
    '#4ca7d3',
    '#4daad3',
    '#4dabd4',
    '#4eadd5',
    '#4fafd7',
    '#50b0d8',
    '#50b1d9',
    '#51b3da',
    '#53b6db',
    '#53b8da',
    '#54b9da',
    '#55bbdc',
    '#56bddd',
    '#57bedc',
    '#58c0de',
    '#58c1df',
    '#59c1df',
    '#59c3e0',
    '#5ac5e0',
    '#5bc5e0',
    '#5dc5e0',
    '#63c8e2',
    '#6ccae2',
    '#73cce4',
    '#79cee5',
    '#7ed0e5',
    '#84d1e5',
    '#8ad2e6',
    '#8ed4e7',
    '#93d5e9',
    '#97d5e9',
    '#9ed8ec',
    '#a3d8ec',
    '#a5d8ed',
    '#aad9ed',
    '#aedaed',
    '#b1dbee',
    '#b5dcef',
    '#b9def1',
    '#bce0f2',
    '#bee0f3',
    '#c1e1f4',
    '#c3e2f4',
    '#c5e3f4',
    '#c7e4f3',
    '#c9e5f3',
    '#cbe6f4',
    '#cee7f5',
    '#cfe7f6',
    '#d0e9f6',
    '#d2eaf7',
    '#d3eaf7',
    '#d6ebf8',
    '#d7ecf9',
    '#d9edfa',
    '#dbeefa',
    '#dbf0f9',
    '#ddf0fa',
    '#dff0fa',
    '#e2f2fb',
    '#e4f3fb',
    '#e5f3fb',
    '#e8f5fc',
    '#eaf5fc',
    '#ecf6fc',
    '#eef7fe',
    '#f0f9fe',
    '#f2f9fe',
    '#f2f9fd',
    '#f5fbfd',
    '#f6fbfd',
    '#f8fbfe',
    '#f9fbfe',
    '#f9fcfe',
    '#fafdfe',
    '#f9fdfe',
    '#f9fdfe',
    '#fafdfd',
    '#fbfefd',
    '#fbfefe',
    '#fcfffe',
    '#fdfefe',
    '#ffffff',
    '#ffffff',
    '#fffffe',
    '#fffff3',
    '#ffffe5',
    '#fffed9',
    '#fffdcf',
    '#fefac7',
    '#fef9c3',
    '#fef7bc',
    '#fdf5b6',
    '#fdf1b1',
    '#fcf0ac',
    '#fceea7',
    '#fbeba3',
    '#fbe99d',
    '#fbe796',
    '#fae390',
    '#fae28b',
    '#fadf86',
    '#f9de83',
    '#f9da7f',
    '#f8d87b',
    '#f8d677',
    '#f8d274',
    '#f7d070',
    '#f7ce6d',
    '#f7cb6b',
    '#f6c766',
    '#f6c464',
    '#f5c362',
    '#f5bf5f',
    '#f5bc5b',
    '#f4ba59',
    '#f4b656',
    '#f3b354',
    '#f3b052',
    '#f3ac51',
    '#f2a94e',
    '#f2a64d',
    '#f2a34c',
    '#f19f49',
    '#f19c49',
    '#f09948',
    '#f09646',
    '#f09144',
    '#ef8d43',
    '#ef8942',
    '#ee8541',
    '#ee813f',
    '#ee7c3e',
    '#ed773c',
    '#ed7139',
    '#ec6d38',
    '#ec6837',
    '#ec6135',
    '#ec5d35',
    '#eb5533',
    '#eb5034',
    '#eb4632',
    '#ea3e2f',
    '#ea3a2d',
    '#ea352a',
    '#ea342a',
    '#ea332a',
    '#ea3329',
    '#e93328',
    '#e93327',
    '#e93326',
    '#e93326',
    '#e93326',
    '#e93325',
    '#e93325',
    '#e93325',
    '#e93325',
    '#e93326',
    '#e93327',
    '#ea3328',
    '#ea3329',
    '#ea332b',
    '#ea332c',
    '#ea332d',
    '#ea332d',
    '#ea332e',
    '#ea332e',
    '#ea332f',
    '#ea3330',
    '#e93330',
    '#e33230',
    '#df3030',
    '#de3030',
    '#d92f30',
    '#d52e2e',
    '#d02c2e',
    '#ce2c2f',
    '#ca2b2e',
    '#c62a2e',
    '#c2292d',
    '#bf282d',
    '#bb272d',
    '#b8262c',
    '#b4252c',
    '#af242c',
    '#ac232c',
    '#a8222a',
    '#a5212b',
    '#a02028',
    '#9d1f28',
    '#981e26',
    '#931c23',
    '#8d1b22',
    '#8a1a21',
    '#871920',
    '#81181e',
    '#7d161d',
    '#78151d',
    '#73141b',
    '#6e1319',
    '#6b1218',
    '#661117',
    '#601015',
    '#5d0f13',
    '#580e10',
    '#540d0f',
    '#500d0f'
];

export const getTemperatureCmap = (maxOrAverage = 'max', units = 'F') => {
    const boundsFahrenheit = maxOrAverage === 'max' ? [-5, 105] : [-5, 110];
    const boundsCelsius = maxOrAverage === 'max' ? [-20, 40] : [-20, 45];

    const bounds = units === 'C' ? boundsCelsius : boundsFahrenheit;

    const colors = hexColors;

    return { bounds, colors, units };
};

export const interpolateColor = (color1, color2, factor) => {
    const color1RGB = color1
        .slice(1)
        .match(/.{2}/g)
        .map((hex) => parseInt(hex, 16));
    const color2RGB = color2
        .slice(1)
        .match(/.{2}/g)
        .map((hex) => parseInt(hex, 16));
    const resultRGB = color1RGB.map((value, index) =>
        Math.ceil(value + factor * (color2RGB[index] - value))
    );
    return `#${resultRGB
        .map((value) => value.toString(16).padStart(2, '0'))
        .join('')}`;
};

export const getTemperatureColor = (temperature, units = 'F') => {
    const fullColors = getTemperatureCmap('max', units).colors;
    const bounds = getTemperatureCmap('max', units).bounds;

    const [minTemp, maxTemp] = bounds;
    const numColors = fullColors.length;

    const clampedTemp = Math.min(Math.max(temperature, minTemp), maxTemp);

    const factor = (clampedTemp - minTemp) / (maxTemp - minTemp);
    const colorIndex = Math.floor(factor * (numColors - 1));

    return fullColors[colorIndex];
};

export const getTextColor = (hexColor) => {
    const rgb = parseInt(hexColor.slice(1), 16);
    const r = (rgb >> 16) & 255;
    const g = (rgb >> 8) & 255;
    const b = rgb & 255;

    const luminance = 0.2126 * r + 0.7152 * g + 0.0722 * b;

    // Luminance < 128 means the color is considered dark, so we return a white text
    return luminance < 128 ? '#FFFFFF' : '#01112D';
};
